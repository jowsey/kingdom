import dayjs from 'dayjs';
import { browser } from '$app/environment';
import { GenerateDemonym } from '$lib/util/Util';

export class Game {
	public static readonly Defaults = {
		City: {
			name: 'Unnamedia',
			autoGenerateDemonym: true,
			autoDemonymWordIndex: 0,
			customDemonym: '',
			people: {
				peasants: 12,
				artisans: 0,
				merchants: 0
			}
		},
		Time: {
			date: dayjs().year(1).month(0).date(1),
			dayProgress: 0,
			daysPerSecond: 0.12 // 300 years in (300 * 365) / 0.12 / (60*60) = ~253.4 hours
		},
		Settings: {
			debugMode: false,
			enableScrollingText: true,
			enableSaving: true,
			autosaveFreq: 30_000
		}
	};

	public City = $state(this.GetSavedState().City);
	public Time = $state(this.GetSavedState().Time);
	public Settings = $state(this.GetSavedState().Settings);

	public TotalPopulation = $derived(this.City.people.peasants + this.City.people.artisans + this.City.people.merchants);
	public AutomaticDemonym = $derived(GenerateDemonym(this.City.name.split(' ')[this.City.autoDemonymWordIndex]));
	public CityDemonym = $derived(
		this.City.autoGenerateDemonym || this.City.customDemonym.trim().length === 0 ? this.AutomaticDemonym : this.City.customDemonym
	);

	private _populationBuffer: number = 0;
	private _animFrameReqId?: ReturnType<typeof requestAnimationFrame>;

	constructor() {
		if (!browser) return;

		console.debug('Game initialized.');
	}

	public RunLoop() {
		console.debug('Starting game loop.');

		const preExistingElapsed = this.Time.dayProgress * (1000 / this.Time.daysPerSecond);
		let lastDayTime = performance.now() - preExistingElapsed;
		let lastAutosaveTime = performance.now();

		const loop = () => {
			const msPerDay = 1000 / this.Time.daysPerSecond; // we calculate it here so it can be adjusted per-tick

			const now = performance.now();
			const elapsed = now - lastDayTime;

			let daysQueued = Math.floor(elapsed / msPerDay);

			this.Time.dayProgress = elapsed / msPerDay;

			while (daysQueued > 0) {
				this.Time.date = this.Time.date.add(1, 'day');

				this.AdvanceDay();
				lastDayTime = now;
				daysQueued--;
			}

			if (performance.now() - lastAutosaveTime > this.Settings.autosaveFreq) {
				console.debug('Autosaving.');
				this.SaveState();
				lastAutosaveTime = performance.now();
			}

			// todo move to worker (otherwise might be paused when tab is inactive?)
			// actually might be fine because we keep catch up when resuming(???)
			this._animFrameReqId = requestAnimationFrame(loop);
		};

		loop();
	}

	private AdvanceDay() {
		// with no other modifiers, this leaves us at ~60k peasants after ~300 years (roughly modeled after London's growth)
		// this should trend low so that upgrades and whatnot can build on it later (after upgrades we should be hitting 100-120k ish)
		const dailyGrowth = 0.4 + this.TotalPopulation * 0.000006;
		this._populationBuffer += dailyGrowth;

		if (this._populationBuffer >= 1) {
			this.City.people.peasants += Math.floor(this._populationBuffer);
			this._populationBuffer -= Math.floor(this._populationBuffer);
		}
	}

	public StopLoop() {
		console.debug('Stopping game loop.');

		if (this._animFrameReqId) cancelAnimationFrame(this._animFrameReqId);
	}

	public SaveState() {
		console.debug('Saving game.');

		if (!this.Settings.enableSaving || localStorage.getItem('doNotSave') === 'true') {
			console.warn('Saving is disabled.');
			return;
		}

		localStorage.setItem(
			'state',
			JSON.stringify({
				city: this.City,
				time: this.Time,
				settings: this.Settings
			})
		);
	}

	public GetSavedState(): typeof Game.Defaults {
		if (!browser) {
			console.debug('Using default state for pre-render');
			return Game.Defaults;
		}

		console.debug('Loading saved state.');

		const { city, time, settings } = JSON.parse(localStorage.getItem('state') ?? '{}');

		if (time?.date) time.date = dayjs(time.date);

		return {
			City: Object.assign({}, Game.Defaults.City, city),
			Time: Object.assign({}, Game.Defaults.Time, time),
			Settings: Object.assign({}, Game.Defaults.Settings, settings)
		};
	}
}

export const game = new Game();
